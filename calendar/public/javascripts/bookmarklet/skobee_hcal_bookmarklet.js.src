function getElementsByClassName (oElm, strTagName, strClassName){
    var arrElements = oElm.getElementsByTagName(strTagName);
    var arrReturnElements = new Array();
    strClassName = strClassName.replace(/\-/g, "\\-");
    var oRegExp = new RegExp("(^|\\s)" + strClassName + "(\\s|$)");
    var oElement;
    for(var i=0; i<arrElements.length; i++){
        oElement = arrElements[i];
        if(oRegExp.test(oElement.className)){
            arrReturnElements.push(oElement);
        }
    }
    return (arrReturnElements);
}

function parseISO8601 (string) {
    var re = /(\d\d\d\d)(?:-?(\d\d)(?:-?(\d\d)(?:[T ](\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(?:Z|(?:([-+])(\d\d)(?::?(\d\d))?)?)?)?)?)?/;
    var d = string.match(re);

    if(d == null) return;

    var offset = 0;
    var date = new Date(d[1], 0, 1);
    if (d[2]) { date.setUTCMonth(d[2] - 1); }
    if (d[3]) { date.setUTCDate(d[3]); }
    date.setUTCHours(d[4]|0);
    date.setUTCMinutes(d[5]|0);
    date.setUTCSeconds(d[6]|0);
    if (d[8]) {
        offset = (Number(d[9]) * 60) + Number(d[10]);
        offset *= ((d[8] == '-') ? 1 : -1);
    }
    time = (Number(date) + (offset * 60 * 1000));
    return new Date(Number(time));
}

function processDate( date )
{
  var year = date.getUTCFullYear();
  var month = date.getUTCMonth() + 1;
  if ( month < 10 ) month = '0' + month;
  var day = date.getUTCDate();
  if ( day < 10 ) day = '0' + day;
  var hours = date.getUTCHours();
  if ( hours < 10 ) hours = '0' + hours;
  var minutes = date.getUTCMinutes();
  if ( minutes < 10 ) minutes = '0' + minutes;
  var seconds = date.getUTCSeconds();
  if ( seconds < 10 ) seconds = '0' + seconds;

  var datestr = '' + year
                + '-'
                + month
                + '-'
                + day;
  var time = 'T' + hours
             + ':'
             + minutes
             + ':'
             + seconds + '.000Z';

  if(date.getUTCHours() == 0 && date.getUTCMinutes() == 0 && date.getUTCSeconds() == 0)
  {
    return datestr;
  } else {
    return datestr + time;
  }
}


function popFirst (arr) {
  return (arr && arr.length > 0) ? arr[0] : null;
}

function trim (str) {
  return str.replace(/^\s+|\s+$/, '');
}

function stripHTML(e) {
  return e.innerHTML.replace(/(<([^>]+)>)/ig,"");
}

function cleanDate (dt) {
  var date = parseISO8601(dt);
  if(date == null) return;
  return processDate(date);
}


function parsehCalendar(ev){
  var dtstart = popFirst(getElementsByClassName(ev, "*", "dtstart"));
  var dtend = popFirst(getElementsByClassName(ev, "*", "dtend"));
  var text = popFirst(getElementsByClassName(ev, "*", "summary"));
  var description = popFirst(getElementsByClassName(ev, "*", "description"));
  var location_title = popFirst(getElementsByClassName(ev, "*", "fn org"));
  var location_address = popFirst(getElementsByClassName(ev, "*", "street-address"));
  var location_locality = popFirst(getElementsByClassName(ev, "*", "locality"));
  var region = popFirst(getElementsByClassName(ev, "*", "region"));
  var postal_code = popFirst(getElementsByClassName(ev, "*", "postal-code"));
  var document_url = document.location;
  var location = popFirst(getElementsByClassName(ev, "*", "location"));
  var url = popFirst(getElementsByClassName(ev, "*", "url"));

  text = text ? trim(stripHTML(text)) : null;
  description = description ? trim(stripHTML(description)) : null;
  location_title = location_title ? trim(stripHTML(location_title)) : null;
  location_address = location_address ? trim(stripHTML(location_address)) : null;
  location_locality = location_locality ? trim(stripHTML(location_locality)) : null;
  region = region ? trim(stripHTML(region)) : null;
  postal_code = postal_code ? trim(stripHTML(postal_code)) : null;
  location = location ? trim(stripHTML(location)) : null;
  dtstart = dtstart && dtstart.title ? cleanDate(dtstart.title) : null;
  dtend = dtend && dtend.title ? cleanDate(dtend.title) : null;

  as = ev.getElementsByTagName("a");
  var urls = [];
  if (url) urls.push(url.href);
  for(var i = 0; i < as.length; i++) {
    urls.push(as[i].href);
  }

  var full_address = "";
  if (location_address != null) {
    full_address += location_address;
  }
  if (location_locality != null) {
    if (full_address !='') {full_address += ', ';}
    full_address += location_locality;
  }
  if (region != null) {
    if (full_address !='') {full_address += ', ';}
    full_address += region;}
  if (postal_code != null) {
    if (full_address !='') {full_address += ', ';}
    full_address += postal_code;
  }
  return {
     "text" : text,
     "description" : description,
     "location" : location,
     "location_title" : location_title,
     "location_address" : full_address,
     "document_url" : document_url,
     "urls" : urls,
     "dtstart" : dtstart,
     "dtend" : dtend
    };
}

var hCals = getElementsByClassName(document, "*", "vevent");
if (hCals.length == 0){
  alert('No event found on this page');
}
else {
  if (hCals.length > 1) {
    alert('More than one event found on this page.  Only creating a plan with the first event.');
  }
  var hEvent = parsehCalendar(hCals[0]);
  //alert(hEvent.location_address);
  //TODO change to www.skobee.com
  //var url = 'http://www.skobee.com/plans/new_hcal?';
  var url = 'http://localhost:3000/plans/new_hcal?';
  url += 'name=' + encodeURIComponent(hEvent.text);
  if (hEvent.description != null) {url += '&desc=' + encodeURIComponent(hEvent.description);}
  if (hEvent.location_title != null) {url += '&place_name=' + encodeURIComponent(hEvent.location_title);}
  if (hEvent.location_address != null) {url += '&place_location=' + encodeURIComponent(hEvent.location_address);}
  if (hEvent.dtstart != null) {url += '&dtstart=' + encodeURIComponent(hEvent.dtstart);}
  if (hEvent.dtend != null) {url += '&dtend=' + encodeURIComponent(hEvent.dtend);}
  document.location.href = url;
}